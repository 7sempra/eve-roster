import VError, { Info } from "verror";

export enum EsiErrorKind {
  CLIENT_ERROR = "esi:ClientError",
  FORBIDDEN_ERROR = "esi:ForbiddenError",
  NOT_FOUND_ERROR = "esi:NotFoundError",
  INTERNAL_SERVER_ERROR = "esi:InternalServerError",
  IO_ERROR = "esi:IOError",
  GENERIC_ERROR = "esi:Error",
}

/**
 * Errors generated by fetchEndpoint().
 */
export class EsiError extends VError {
  public readonly kind: EsiErrorKind;

  constructor(kind: EsiErrorKind, message: string, causedBy?: Error) {
    super(
      {
        name: "EsiError",
        cause: causedBy,
      },
      message
    );
    this.kind = kind;
  }

  get info(): Info {
    return VError.info(this);
  }

  get fullStack(): string {
    return VError.fullStack(this);
  }
}
